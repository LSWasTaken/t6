const { SlashCommandBuilder } = require('discord.js');
const { createErrorEmbed, createLoadingEmbed } = require('../utils/embeds');

// Country code to flag emoji mapping
const countryFlags = {
    'GBR': 'üá¨üáß', // Great Britain
    'ESP': 'üá™üá∏', // Spain
    'MEX': 'üá≤üáΩ', // Mexico
    'MON': 'üá≤üá®', // Monaco
    'NED': 'üá≥üá±', // Netherlands
    'AUS': 'üá¶üá∫', // Australia
    'CAN': 'üá®üá¶', // Canada
    'CHN': 'üá®üá≥', // China
    'DEN': 'üá©üá∞', // Denmark
    'FIN': 'üá´üáÆ', // Finland
    'FRA': 'üá´üá∑', // France
    'DEU': 'üá©üá™', // Germany
    'GER': 'üá©üá™', // Germany (alternative code)
    'ITA': 'üáÆüáπ', // Italy
    'JPN': 'üáØüáµ', // Japan
    'NZL': 'üá≥üáø', // New Zealand
    'RUS': 'üá∑üá∫', // Russia
    'THA': 'üáπüá≠', // Thailand
    'USA': 'üá∫üá∏', // United States
    'VEN': 'üáªüá™', // Venezuela
    'BRA': 'üáßüá∑', // Brazil
    'CHE': 'üá®üá≠', // Switzerland
    'JOR': 'üáØüá¥', // Jordan
    'IND': 'üáÆüá≥', // India
    'MYS': 'üá≤üáæ', // Malaysia
    'POL': 'üáµüá±', // Poland
    'SWE': 'üá∏üá™', // Sweden
    'AUT': 'üá¶üáπ', // Austria
    'BEL': 'üáßüá™', // Belgium
    'COL': 'üá®üá¥', // Colombia
    'IDN': 'üáÆüá©', // Indonesia
    'IRL': 'üáÆüá™', // Ireland
    'LUX': 'üá±üá∫', // Luxembourg
    'PRT': 'üáµüáπ', // Portugal
    'SGP': 'üá∏üá¨', // Singapore
    'ZAF': 'üáøüá¶', // South Africa
    'TUR': 'üáπüá∑', // Turkey
    'ARE': 'üá¶üá™', // United Arab Emirates
    'ARG': 'üá¶üá∑', // Argentina
    'CHL': 'üá®üá±', // Chile
    'CZE': 'üá®üáø', // Czech Republic
    'DNK': 'üá©üá∞', // Denmark (alternative code)
    'EST': 'üá™üá™', // Estonia
    'GRC': 'üá¨üá∑', // Greece
    'HKG': 'üá≠üá∞', // Hong Kong
    'HRV': 'üá≠üá∑', // Croatia
    'HUN': 'üá≠üá∫', // Hungary
    'ISR': 'üáÆüá±', // Israel
    'KOR': 'üá∞üá∑', // South Korea
    'LTU': 'üá±üáπ', // Lithuania
    'LVA': 'üá±üáª', // Latvia
    'MCO': 'üá≤üá®', // Monaco (alternative code)
    'MDA': 'üá≤üá©', // Moldova
    'MNG': 'üá≤üá≥', // Mongolia
    'NOR': 'üá≥üá¥', // Norway
    'PHL': 'üáµüá≠', // Philippines
    'ROU': 'üá∑üá¥', // Romania
    'SAU': 'üá∏üá¶', // Saudi Arabia
    'SVK': 'üá∏üá∞', // Slovakia
    'SVN': 'üá∏üáÆ', // Slovenia
    'TWN': 'üáπüáº', // Taiwan
    'UKR': 'üá∫üá¶', // Ukraine
    'VNM': 'ÔøΩÔøΩüá≥', // Vietnam
    'ZWE': 'üáøüáº'  // Zimbabwe
};

// Calculate age from date of birth
const calculateAge = (dateOfBirth) => {
    const today = new Date();
    const birthDate = new Date(dateOfBirth);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }
    
    return age;
};

// Find exact driver match
const findDriver = (drivers, query) => {
    query = query.toLowerCase();
    return drivers.find(driver => 
        driver.first_name.toLowerCase() === query ||
        driver.last_name.toLowerCase() === query ||
        driver.name_acronym.toLowerCase() === query ||
        driver.driver_number.toString() === query ||
        `${driver.first_name.toLowerCase()} ${driver.last_name.toLowerCase()}` === query
    );
};

// Fetch Wikipedia data for driver
const fetchWikipediaData = async (driverName) => {
    try {
        const response = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(driverName)}`);
        if (!response.ok) return null;
        return await response.json();
    } catch (error) {
        console.error('Error fetching Wikipedia data:', error);
        return null;
    }
};

module.exports = {
    data: new SlashCommandBuilder()
        .setName('driver')
        .setDescription('Search for Formula 1 driver information')
        .addStringOption(option =>
            option.setName('query')
                .setDescription('Driver name, code, or number (e.g., Hamilton, HAM, 44)')
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName('session')
                .setDescription('Session key (optional)')
                .setRequired(false)),

    async execute(interaction) {
        try {
            await interaction.reply({
                embeds: [createLoadingEmbed()],
                ephemeral: true
            });

            const query = interaction.options.getString('query');
            const sessionKey = interaction.options.getInteger('session');

            // Build API URL for 2025 season
            let apiUrl = 'https://api.openf1.org/v1/drivers?meeting_key=1261'; // 2025 season meeting key
            if (sessionKey) {
                apiUrl += `&session_key=${sessionKey}`;
            }

            // Fetch drivers data from OpenF1 API
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error('Failed to fetch driver data');
            }

            const drivers = await response.json();
            if (!Array.isArray(drivers) || drivers.length === 0) {
                throw new Error('Invalid driver data received');
            }

            // Find exact driver match
            const driver = findDriver(drivers, query);

            if (!driver) {
                return interaction.editReply({
                    embeds: [createErrorEmbed(`No driver found matching "${query}". Try searching by full name, code (e.g., HAM), or number (e.g., 44).`)],
                    ephemeral: true
                });
            }

            // Fetch Wikipedia data
            const wikiData = await fetchWikipediaData(`${driver.first_name}_${driver.last_name}`);

            const countryFlag = driver.country_code ? countryFlags[driver.country_code] || 'üè≥Ô∏è' : 'üè≥Ô∏è';
            const countryInfo = driver.country_code ? `${countryFlag} ${driver.country_code}` : 'üè≥Ô∏è Unknown';

            await interaction.editReply({
                embeds: [{
                    color: 0xFF1801,
                    title: `üèéÔ∏è ${driver.first_name} ${driver.last_name}`,
                    description: [
                        `**Driver Information**`,
                        `‚Ä¢ Number: #${driver.driver_number}`,
                        `‚Ä¢ Code: ${driver.name_acronym}`,
                        `‚Ä¢ Team: ${driver.team_name}`,
                        `‚Ä¢ Nationality: ${countryInfo}`,
                        '',
                        `**2025 Season Status**`,
                        `‚Ä¢ Broadcast Name: ${driver.broadcast_name}`,
                        sessionKey ? `‚Ä¢ Session Key: ${sessionKey}` : '',
                        '',
                        wikiData?.extract ? `**About**\n${wikiData.extract.split('.')[0]}.` : '',
                        '',
                        `[Wikipedia Profile](${wikiData?.content_urls?.desktop?.page || ''})`
                    ].filter(Boolean).join('\n'),
                    thumbnail: {
                        url: wikiData?.thumbnail?.source || driver.headshot_url || ''
                    },
                    footer: {
                        text: 'Formula 1 Bot - 2025 Season',
                        iconURL: 'https://media.formula1.com/image/upload/f_auto/q_auto/v1677245035/content/dam/fom-website/2018-redesign-assets/Track%20icons%204x3/Abu%20Dhabi.png.transform/3col/image.png'
                    }
                }],
                ephemeral: true
            });
        } catch (error) {
            console.error('Error in /driver command:', error);
            await interaction.editReply({
                embeds: [createErrorEmbed('An error occurred while searching for driver information. Please try again later.')],
                ephemeral: true
            });
        }
    },
}; 